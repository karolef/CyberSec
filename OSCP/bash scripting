https://www.bashoneliners.com/

================================================

VARIABLE NAME	DESCRIPTION
$0	The name of the Bash script
$1 - $9	The first 9 arguments to the Bash script
$#	Number of arguments passed to the Bash script
$@	All arguments passed to the Bash script
$?	The exit status of the most recently run process
$$	The process ID of the current script
$USER	The username of the user running the script
$HOSTNAME	The hostname of the machine
$RANDOM	A random number
$LINENO	The current line number in the script

================================================

read - for user input
  -p prompt for the user
  -s silent user input (for pass)
  
================================================
if [ condition ]
[] refer to test commant/utility - evaluates the expression and, if it evaluates to true,
     returns a zero (true) exit status; otherwise it returns 1 (false).  If
     there is no expression, test also returns 1 (false).


OPERATOR	DESCRIPTION: EXPRESSION TRUE IF...
!EXPRESSION	The EXPRESSION is false.
-n STRING	STRING length is greater than zero
-z STRING	The length of STRING is zero (empty)
STRING1 != STRING2	STRING1 is not equal to STRING2
STRING1 = STRING2	STRING1 is equal to STRING2
INTEGER1 -eq INTEGER2	INTEGER1 is equal to INTEGER2
INTEGER1 -ne INTEGER2	INTEGER1 is not equal to INTEGER2
INTEGER1 -gt INTEGER2	INTEGER1 is greater than INTEGER2
INTEGER1 -lt INTEGER2	INTEGER1 is less than INTEGER2
INTEGER1 -ge INTEGER2	INTEGER1 is greater than or equal to INTEGER 2
INTEGER1 -le INTEGER2	INTEGER1 is less than or equal to INTEGER 2
-d FILE	FILE exists and is a directory
-e FILE	FILE exists
-r FILE	FILE exists and has read permission
-s FILE	FILE exists and it is not empty
-w FILE	FILE exists and has write permission
-x FILE	FILE exists and has execute permission

================================================

for ip in $(seq 1 10); do echo 1.2.3.$ip; done

The seq utility prints a sequence of numbers, one per line (default), from first (default 1), to near
     last as possible, in increments of incr (default 1).  When first is larger than last the default incr
     is -1.
     
 for i in {1..10}; do echo 1.2.3.$i; done
 
================================================

while [ <some test> ]
do
  <perform an action>
done

incrementation in bash --> ((counter++))


================================================

function function_name {
commands...
}

In other programming languages, such as C,
parentheses would contain the expected arguments,
but in Bash the parentheses serve only as decoration.
They are never used.

function_name () {
commands...
}

$? --> exit code

================================================
carving out subdomains out of index.html

grep -o '[^/]*\.google\.com' index.html | sort -u > list.txt

finding IPs of a list of hosts

for url in $(cat list.txt); do host $url; done | grep "has address" | cut -d " " -f 4 | sort -u

searching via searchsploit
oneliner
for e in $(searchsploit afd windows -w -t | grep http | cut -f 2 -d "|"); do exp_name=$(echo $e | cut -d "/" -f 5) && url=$(echo $e | sed 's/exploits/raw/') && wget -q --no-check-certificate $url -O $exp_name; done
bash script

#!/bin/bash
# Bash script to search for a given exploit and download all matches.

for e in $(searchsploit afd windows -w -t | grep http | cut -f 2 -d "|")

do
  exp_name=$(echo $e | cut -d "/" -f 5)
  url=$(echo $e | sed 's/exploits/raw/')
  wget -q --no-check-certificate $url -O $exp_name
done

capture rendered main && build an HTML file with those pngs

for ip in $(cat nmap-scan_1.2.3.4-254 | grep 80 | grep -v "Nmap" | awk '{print $2}'); do cutycapt --url=$ip --out=$ip.png;done

#!/bin/bash
# Bash script to examine the scan results through HTML.

echo "<HTML><BODY><BR>" > web.html

ls -1 *.png | awk -F : '{ print $1":\n<BR><IMG SRC=\""$1""$2"\" width=600><BR>"}' >> web.html

echo "</BODY></HTML>" >> web.html

================================================
bash port scanner

#!/bin/bash
host=1.2.3.4
for port in {1..65535}; do
    timeout .1 bash -c "echo >/dev/tcp/$host/$port" &&
        echo "port $port is open"
done
echo "Done"






