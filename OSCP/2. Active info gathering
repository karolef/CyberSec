DNS enum

Each domain can use different types of DNS records. Some of the most common types of DNS records include:

NS - Nameserver records contain the name of the authoritative servers hosting the DNS records for a domain.
A - Also known as a host record, the "a record" contains the IP address of a hostname (such as www.megacorpone.com).
MX - Mail Exchange records contain the names of the servers responsible for handling email for the domain. A domain can contain multiple MX records.
PTR - Pointer Records are used in reverse lookup zones and are used to find the records associated with an IP address.
CNAME - Canonical Name Records are used to create aliases for other host records.
TXT - Text records can contain any arbitrary data and can be used for various purposes, such as domain ownership verification.

===============================================================
forward lookup
for  subdomain in $(cat list.txt); do host $subdomain.testhost.com; done

sudo apt install seclists
===============================================================
reverse lookup
for ip in $(seq 50 100); do host 1.2.3.$ip; done | grep -v "not found"

===============================================================
zone transfer
host -l <domain name> <dns server address>

host -t ns testhost.com | cut -d " " -f 4

#!/bin/bash

# Simple Zone Transfer Bash Script
# $1 is the first argument given after the bash script
# Check if argument was given, if not, print usage

if [ -z "$1" ]; then
  echo "[*] Simple Zone transfer script"
  echo "[*] Usage   : $0 <domain name> "
  exit 0
fi

# if argument was given, identify the DNS servers for the domain

for server in $(host -t ns $1 | cut -d " " -f4); do
  # For each of these servers, attempt a zone transfer
  host -l $1 $server |grep "has address"
done


===============================================================
TOOLS

DNSRecon
dnsrecon --> -d specify domain name
             -t specify enum to perform ( -t axfr = zone transfer; it brt = brute force)
             -D file containing subdomain strings
             
DNSenum
dnsenum testhostname.com
===============================================================
port scanning

iptables - administration tool for IPv4/IPv6 packet filtering and NAT
           -l insert a new rule into a given chain
           -s source
           -d destination
           -j what to do when a packet matches e.g. ACCEPT
           -Z zero the packet and byte counter in all chains
           
example
sudo iptables -I INPUT 1 -s 1.2.3.4 -j ACCEPT
sudo iptables -I OUTPUT 1 -d 1.2.3.4 -j ACCEPT
sudo iptables -Z

sudo iptables -vn -L --> verbose, enable numeric output, list the rules present in all chains

nmap --help
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL <inputfilename>: Input from list of hosts/networks
  -iR <num hosts>: Choose random targets
  --exclude <host1[,host2][,host3],...>: Exclude hosts/networks
  --excludefile <exclude_file>: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan / network sweep
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers <serv1[,serv2],...>: Specify custom DNS servers
  --system-dns: Use OS's DNS resolver
  --traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags <flags>: Customize TCP scan flags
  -sI <zombie host[:probeport]>: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b <FTP relay host>: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports <port ranges>: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don't randomize
  --top-ports <number>: Scan <number> most common ports
  --port-ratio <ratio>: Scan ports more common than <ratio>
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity <level>: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=<Lua scripts>: <Lua scripts> is a comma separated list of
           directories, script-files or script-categories
  --script-args=<n1=v1,[n2=v2,...]>: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=<Lua scripts>: Show help about scripts.
           <Lua scripts> is a comma-separated list of script-files or
           script-categories.
OS DETECTION:
  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take <time> are in seconds, or append 'ms' (milliseconds),
  's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).
  -T<0-5>: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup <size>: Parallel host scan group sizes
  --min-parallelism/max-parallelism <numprobes>: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>: Specifies
      probe round trip time.
  --max-retries <tries>: Caps number of port scan probe retransmissions.
  --host-timeout <time>: Give up on target after this long
  --scan-delay/--max-scan-delay <time>: Adjust delay between probes
  --min-rate <number>: Send packets no slower than <number> per second
  --max-rate <number>: Send packets no faster than <number> per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu <val>: fragment packets (optionally w/given MTU)
  -D <decoy1,decoy2[,ME],...>: Cloak a scan with decoys
  -S <IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/--source-port <portnum>: Use given port number
  --proxies <url1,[url2],...>: Relay connections through HTTP/SOCKS4 proxies
  --data <hex string>: Append a custom payload to sent packets
  --data-string <string>: Append a custom ASCII string to sent packets
  --data-length <num>: Append random data to sent packets
  --ip-options <options>: Send packets with specified ip options
  --ttl <val>: Set IP time-to-live field
  --spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA <basename>: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume <filename>: Resume an aborted scan
  --stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir <dirname>: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES

nmap -sn 1.2.3.1-254 -oG ping-sweep.txt
grep Up ping-sweep.txt | cut -d " " -f 2

nmap -p 80 1.2.3.1-254 -oG wen-sweep.txt
grep open web-sweep.txt | cut -d " " -f 2

--top-ports=20
-A aggressive
-O os fingerprinting
-sV banner grabbing

NSE
/usr/share/nmap/scripts
smb-os-discovery
dns-zone-transfer

nmap --script-help dns-zone-transfer

masscan - fastest port scanner

===============================================================
SMB enum
NetBIOS TCP 139
SMB TCP 445

nbtscan - NetBios scanner

ls -1 /usr/share/nmap/scripts/smb*

nmap -v -p 139, 445 --script=smb-os-discovery 1.2.3.4
nmap -v -p 139,445 --script=smb-vuln-ms08-067 --script-args=unsafe=1 1.2.3.4

===============================================================
NFS enum
checking for rpcbind
nmap -sV -p 111 --script=rpcinfo 1.2.3.1-254

ls -1 /usr/share/nmap/scripts/nfs*

nmap -p 11 --script nfs* 1.2.3.4

mkdir home
sudo mount -o nolock 1.2.3.4:/home ~/home/
cd home/ && ls

sudo adduser pwn
sudo sed -i -e 's/1001/1014/g' /etc/passwd --> swap UUID, -i replace file in place; -e execute as script

===============================================================
SMTP enum

VRFY request asks the server to verify an email address
EXPN asks the server for the membership of a mailing list

python verify a user script

#!/usr/bin/python

import socket
import sys

if len(sys.argv) != 2:
        print "Usage: vrfy.py <username>"
        sys.exit(0)

# Create a Socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to the Server
connect = s.connect(('10.11.1.217',25))

# Receive the banner
banner = s.recv(1024)

print banner

# VRFY a user
s.send('VRFY ' + sys.argv[1] + '\r\n')
result = s.recv(1024)

print result

# Close the socket
s.close()


===============================================================
SNMP enum - p 161
onesixtyone - tool for snmp enum brute forcing
snmpwalk - probe and query SNMP values using




